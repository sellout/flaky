#!/usr/bin/env bash

source strict-mode.bash
shopt -s dotglob
IFS=$'\n'
script_name=$(basename "${0}")

function usage() {
  cat << EOF >&2
Usage:

    ${script_name} [-h] [-t PROJECT_TYPE]

  Updates the current project with the latest from the upstream template.

  PROJECT_TYPE is the name of the template to sync. If it’s not provided, we try
               to read it from the ‘type.name’ field in the mustache YAML file
               if it exists.

  This script looks for .config/mustache.yaml in the repository root. If found,
  it will apply template substitution, but this will still run without it.

  Caveats:
  - this doesn’t remove files that have been removed from the template since
    the last update and
  - this applies mustache if the expected .config/mustache.yaml exists in the
    repository, but that doesn’t yet support renaming files, so some may need to
    be manually renamed after they’re created.
EOF
}

while getopts "ht:" option; do
  case "${option}" in
    h)
      usage
      exit 0
      ;;
    t)
      project_type="${OPTARG}"
      ;;
    ?)
      usage
      exit 1
      ;;
  esac
done
if [[ -v ${OPTIND} ]]; then
  echo "Unsupported options provided: ${*:OPTIND}" >&2
  usage
  exit 1
fi

project_dir="${PWD}"
mustache_file="${project_dir}/.config/mustache.yaml"

if [[ ! -v project_type ]]; then
  if [[ -f ${mustache_file} ]]; then
    project_type="$(yq '.type.name' "${mustache_file}")"
  else
    echo "Unable to find project type." >&2
    usage
    exit 1
  fi
fi

temp_dir="$(mktemp --directory --tmpdir "${project_type}-template.XXXX")"

(
  cd "${temp_dir}" \
    && nix flake init --template "github:sellout/flaky#${project_type}"
)

if [[ -f ${mustache_file} ]]; then
  find "${temp_dir}" -type f -exec bash -c \
    'mustache "${1}" "${0}" | sponge "${0}"' \
    {} "${mustache_file}" \;
fi

cp -pr "${temp_dir:?}"/* "${project_dir}"
rm -rf "${temp_dir:?}"/*
rmdir "${temp_dir:?}"
